<?xml version="1.0" encoding="UTF-8"?>
<testsuite errors="0" failures="1" file="subnet_calculator_tests.py" name="subnet_calculator_tests.TestCalculateIpv6Address-20201010140442" skipped="0" tests="14" time="0.019" timestamp="2020-10-10T14:04:43">
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_maximum_ip_and_well_below_maximum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_maximum_ip_and_maximum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_maximum_ip_and_one_below_maximum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_minimum_ip_and_minimum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_minimum_ip_and_one_above_minimum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_minimum_ip_and_well_above_minimum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_one_above_minimum_ip_and_minimum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_one_above_minimum_ip_and_one_above_minimum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_one_below_maximum_ip_and_maximum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_one_below_maximum_ip_and_one_below_maximum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_well_above_minimum_ip_and_minimum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_well_above_minimum_ip_and_well_above_minimum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_bit_format_with_well_below_maximum_ip_and_maximum_subnet" time="0.001" timestamp="2020-10-10T14:04:43"/>
	<testcase classname="subnet_calculator_tests.TestCalculateIpv6Address" name="test_calculate_subnet_in_ip_format_with_well_below_maximum_ip_and_well_below_maximum_subnet" time="0.005" timestamp="2020-10-10T14:04:43">
		<failure message="'55d5:a4ff:c585:d5c7:b999:c580:0000:0000' != '55d5:a4ff:c585:d5c7:b999:c580:0:0'
- 55d5:a4ff:c585:d5c7:b999:c580:0000:0000
?                                ---  ---
+ 55d5:a4ff:c585:d5c7:b999:c580:0:0
" type="AssertionError">
<![CDATA[Traceback (most recent call last):
  File "/usr/lib/python3.6/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/usr/lib/python3.6/unittest/case.py", line 605, in run
    testMethod()
  File "/home/student/Documents/cs3280project2/src/unittest/python/subnet_calculator_tests.py", line 967, in test_calculate_subnet_in_ip_format_with_well_below_maximum_ip_and_well_below_maximum_subnet
    self.assertEquals('55d5:a4ff:c585:d5c7:b999:c580:0000:0000', subnet)
  File "/usr/lib/python3.6/unittest/case.py", line 1321, in deprecated_func
    return original_func(*args, **kwargs)
  File "/usr/lib/python3.6/unittest/case.py", line 829, in assertEqual
    assertion_func(first, second, msg=msg)
  File "/usr/lib/python3.6/unittest/case.py", line 1203, in assertMultiLineEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "/usr/lib/python3.6/unittest/case.py", line 670, in fail
    raise self.failureException(msg)
AssertionError: '55d5:a4ff:c585:d5c7:b999:c580:0000:0000' != '55d5:a4ff:c585:d5c7:b999:c580:0:0'
- 55d5:a4ff:c585:d5c7:b999:c580:0000:0000
?                                ---  ---
+ 55d5:a4ff:c585:d5c7:b999:c580:0:0

]]>		</failure>
	</testcase>
</testsuite>
